from aiogram import types
from loader import dp
from asyncio import sleep
from filters import enough_money, IsPrivate
from keyboards.default import kb_play, kb_knb, kb_coin
from utils.db_api.quick_comands import update_balance, select_user
from utils.misc import rate_limit
from random import randint


@rate_limit(limit=2)
@dp.message_handler(IsPrivate(), text = ["–ò–≥—Ä–∞—Ç—å", "–ö –∏–≥—Ä–∞–º"])
async def check_message(message: types.Message):
    await message.answer("–î–ª—è –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏ –æ—Ç–ø—Ä–≤—å —ç–º–æ–¥–∑–∏ üé≤\n"
                         "–î–ª—è –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É –æ—Ç–ø—Ä–∞–≤—å —ç–º–æ–¥–∑–∏ üé∞ \n"
                         "üëá–î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏üëá", reply_markup=kb_play)


@rate_limit(limit=3)
@dp.message_handler(enough_money(), content_types="dice")
async def check_message(message: types.Message):
    user_id = message.from_user.id
    user = await select_user(user_id)
    if message.dice.emoji == "üé∞":
        value = message.dice.value
        await sleep(2)
        if value == 1 or value == 22 or value == 43 or value == 64:
            await update_balance(user_id, int(user.stake) * 15)
            user = await select_user(user_id)
            await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç—ã –≤—ã–∏–≥—Ä–∞–ª x15 –æ—Ç —Å—Ç–∞–≤–∫–∏ \n"
                                 f"+{int(user.stake)*15 }\n"
                                 f"–±–∞–ª–∞–Ω—Å = {user.balance}")
            wins = user.wins + 1
            await user.update(wins=wins).apply()
            win_money = user.win_money + user.stake*15
            await user.update(win_money=int(win_money)).apply()
        else:
            await update_balance(user_id, -int(user.stake))
            user = await select_user(user_id)
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª \n"
                                 f"-{user.stake}\n"
                                 f"–±–∞–ª–∞–Ω—Å = {user.balance}")
            loses = user.loses + 1
            await user.update(loses=loses).apply()
            lose_money = user.lose_money + user.stake
            await user.update(lose_money=lose_money).apply()
    elif message.dice.emoji == "üé≤":
        player_1 = message.dice.value
        player = await message.answer_dice()
        player_2 = player.dice.value
        await sleep(3.5)
        if player_1 > player_2:
            await update_balance(user_id, int(user.stake))
            user = await select_user(user_id)
            await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ø–æ–±–µ–¥–∞\n"
                                 f"+{user.stake}\n"
                                 f"–±–∞–ª–∞–Ω—Å = {user.balance}")
            wins = user.wins + 1
            await user.update(wins=wins).apply()
            win_money = user.win_money + user.stake
            await user.update(win_money=win_money).apply()

        elif player_1 == player_2:
            await message.answer("–ù–∏—á—å—è, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏\n"
                                 f"–±–∞–ª–∞–Ω—Å = {user.balance}")
            draw = user.draws + 1
            await user.update(draws=draw).apply()
        else:
            await update_balance(user_id, -int(user.stake))
            user = await select_user(user_id)
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª\n"
                                 f"-{user.stake}\n"
                                 f"–±–∞–ª–∞–Ω—Å = {user.balance}")
            loses = user.loses + 1
            await user.update(loses=loses).apply()
            lose_money = user.lose_money + user.stake
            await user.update(lose_money=lose_money).apply()


@rate_limit(limit=1)
@dp.message_handler(enough_money(), text="–ö–∞–º–µ–Ω—å –ù–æ–∂–Ω–∏—Ü—ã –ë—É–º–∞–≥–∞")
async def check_message(message: types.Message):
    await message.answer("–í—ã–±—Ä–∞—Å—ã–≤–∞–π", reply_markup=kb_knb)


@rate_limit(limit=1)
@dp.message_handler(enough_money(), text=["ü™®", "‚úÇÔ∏è", "üßª"])
async def check_message(message: types.Message):
    user_id = message.from_user.id
    user = await select_user(user_id)
    result = randint(1,3)
    win_status = 0
    if result==1:
        await message.answer("ü™®", reply_markup=kb_knb)
        if message.text == "‚úÇÔ∏è":
            win_status = 2
        elif message.text == "üßª":
            win_status = 1
        else:
            win_status = 3
    elif result==2:
        await message.answer("‚úÇÔ∏è", reply_markup=kb_knb)
        if message.text == "üßª":
            win_status = 2
        elif message.text == "ü™®":
            win_status = 1
        else:
            win_status = 3
    else:
        await message.answer("üßª", reply_markup=kb_knb)
        if message.text == "ü™®":
            win_status = 2
        elif message.text == "‚úÇÔ∏è":
            win_status = 1
        else:
            win_status = 3

    if win_status == 1:
        await update_balance(user_id, int(user.stake))
        user = await select_user(user_id)
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ø–æ–±–µ–¥–∞\n"
                             f"+{user.stake}\n"
                             f"–±–∞–ª–∞–Ω—Å = {user.balance}")
        wins = user.wins + 1
        await user.update(wins=wins).apply()
        win_money = user.win_money + user.stake
        await user.update(win_money=win_money).apply()

    elif win_status == 3:
        await message.answer("–ù–∏—á—å—è, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏\n"
                             f"–±–∞–ª–∞–Ω—Å = {user.balance}")
        draw = user.draws + 1
        await user.update(draws=draw).apply()
    else:
        await update_balance(user_id, -int(user.stake))
        user = await select_user(user_id)
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª\n"
                             f"-{user.stake}\n"
                             f"–±–∞–ª–∞–Ω—Å = {user.balance}")
        loses = user.loses + 1
        await user.update(loses=loses).apply()
        lose_money = user.lose_money + user.stake
        await user.update(lose_money=lose_money).apply()


@rate_limit(limit=1)
@dp.message_handler(enough_money(), text="–ú–æ–Ω–µ—Ç–∫–∞")
async def check_message(message: types.Message):
    await message.answer("–í—ã–±–∏—Ä–∞–π", reply_markup=kb_coin)


@rate_limit(limit=1)
@dp.message_handler(enough_money(), text = ["–û—Ä–µ–ª", "–†–µ—à–∫–∞"])
async def check_message(message: types.Message):
    user_id = message.from_user.id
    user = await select_user(user_id)
    result = randint(1, 2)
    win_status = 0
    if result == 1:
        await message.answer("–í—ã–ø–∞–ª –†–µ—à–∫–∞")
        if message.text=="–†–µ—à–∫–∞":
            win_status = 1
        else:
            win_status = 2
    else:
        await message.answer("–í—ã–ø–∞–ª –û—Ä–µ–ª")
        if message.text == "–û—Ä–µ–ª":
            win_status = 1
        else:
            win_status = 2
    if win_status == 1:
        await update_balance(user_id, int(user.stake))
        user = await select_user(user_id)
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ø–æ–±–µ–¥–∞\n"
                             f"+{user.stake}\n"
                             f"–±–∞–ª–∞–Ω—Å = {user.balance}")
        wins = user.wins + 1
        await user.update(wins=wins).apply()
        win_money = user.win_money + user.stake
        await user.update(win_money=win_money).apply()
    else:
        await update_balance(user_id, -int(user.stake))
        user = await select_user(user_id)
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª\n"
                             f"-{user.stake}\n"
                             f"–±–∞–ª–∞–Ω—Å = {user.balance}")
        loses = user.loses + 1
        await user.update(loses=loses).apply()
        lose_money = user.lose_money + user.stake
        await user.update(lose_money=lose_money).apply()



